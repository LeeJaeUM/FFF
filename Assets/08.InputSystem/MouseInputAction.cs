//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/08.InputSystem/MouseInputAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @MouseInputAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @MouseInputAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""MouseInputAction"",
    ""maps"": [
        {
            ""name"": ""UI"",
            ""id"": ""5fcd0705-f84d-47bb-b75f-0dc6b9e8eb58"",
            ""actions"": [
                {
                    ""name"": ""MousePosition"",
                    ""type"": ""Value"",
                    ""id"": ""62f4b126-53d5-4dcc-a98d-360f57547552"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""RClick"",
                    ""type"": ""Button"",
                    ""id"": ""b9521932-83be-47e6-9df7-956fcbcaccca"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""LClick"",
                    ""type"": ""Button"",
                    ""id"": ""b535f144-d559-4caa-8fb6-bef3701a812b"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""InventroyOnOff"",
                    ""type"": ""Button"",
                    ""id"": ""e313dc08-1f85-4516-bc74-ae8c28ed4d9e"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Produce"",
                    ""type"": ""Button"",
                    ""id"": ""2570382a-4fc5-49a2-83a4-4416f6e552f1"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""a35b3526-2755-4604-a2aa-85ef159e7cfc"",
                    ""path"": ""<Mouse>/position"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""MousePosition"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""95e4fd7e-529e-4418-8e2a-b8e444a6d3d0"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""RClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2be28277-9a68-4000-9072-cbcc4f5be4c5"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": ""KM"",
                    ""action"": ""LClick"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""52cf503c-4b49-4e32-af49-f1552e40e739"",
                    ""path"": ""<Keyboard>/i"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InventroyOnOff"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""2c3da118-5678-4f50-bbe4-021add688e47"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Produce"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Interacable"",
            ""id"": ""ba5dac88-b016-497a-812e-10013f6fe380"",
            ""actions"": [
                {
                    ""name"": ""InteracableAction"",
                    ""type"": ""Button"",
                    ""id"": ""a9396ff0-f82b-418e-95f1-50073fe12d7c"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""f02820b2-8a2a-402c-9e33-7a0887a06406"",
                    ""path"": ""<Keyboard>/f"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""InteracableAction"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""KM"",
            ""bindingGroup"": ""KM"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                },
                {
                    ""devicePath"": ""<Mouse>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_MousePosition = m_UI.FindAction("MousePosition", throwIfNotFound: true);
        m_UI_RClick = m_UI.FindAction("RClick", throwIfNotFound: true);
        m_UI_LClick = m_UI.FindAction("LClick", throwIfNotFound: true);
        m_UI_InventroyOnOff = m_UI.FindAction("InventroyOnOff", throwIfNotFound: true);
        m_UI_Produce = m_UI.FindAction("Produce", throwIfNotFound: true);
        // Interacable
        m_Interacable = asset.FindActionMap("Interacable", throwIfNotFound: true);
        m_Interacable_InteracableAction = m_Interacable.FindAction("InteracableAction", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_MousePosition;
    private readonly InputAction m_UI_RClick;
    private readonly InputAction m_UI_LClick;
    private readonly InputAction m_UI_InventroyOnOff;
    private readonly InputAction m_UI_Produce;
    public struct UIActions
    {
        private @MouseInputAction m_Wrapper;
        public UIActions(@MouseInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MousePosition => m_Wrapper.m_UI_MousePosition;
        public InputAction @RClick => m_Wrapper.m_UI_RClick;
        public InputAction @LClick => m_Wrapper.m_UI_LClick;
        public InputAction @InventroyOnOff => m_Wrapper.m_UI_InventroyOnOff;
        public InputAction @Produce => m_Wrapper.m_UI_Produce;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @MousePosition.started += instance.OnMousePosition;
            @MousePosition.performed += instance.OnMousePosition;
            @MousePosition.canceled += instance.OnMousePosition;
            @RClick.started += instance.OnRClick;
            @RClick.performed += instance.OnRClick;
            @RClick.canceled += instance.OnRClick;
            @LClick.started += instance.OnLClick;
            @LClick.performed += instance.OnLClick;
            @LClick.canceled += instance.OnLClick;
            @InventroyOnOff.started += instance.OnInventroyOnOff;
            @InventroyOnOff.performed += instance.OnInventroyOnOff;
            @InventroyOnOff.canceled += instance.OnInventroyOnOff;
            @Produce.started += instance.OnProduce;
            @Produce.performed += instance.OnProduce;
            @Produce.canceled += instance.OnProduce;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @MousePosition.started -= instance.OnMousePosition;
            @MousePosition.performed -= instance.OnMousePosition;
            @MousePosition.canceled -= instance.OnMousePosition;
            @RClick.started -= instance.OnRClick;
            @RClick.performed -= instance.OnRClick;
            @RClick.canceled -= instance.OnRClick;
            @LClick.started -= instance.OnLClick;
            @LClick.performed -= instance.OnLClick;
            @LClick.canceled -= instance.OnLClick;
            @InventroyOnOff.started -= instance.OnInventroyOnOff;
            @InventroyOnOff.performed -= instance.OnInventroyOnOff;
            @InventroyOnOff.canceled -= instance.OnInventroyOnOff;
            @Produce.started -= instance.OnProduce;
            @Produce.performed -= instance.OnProduce;
            @Produce.canceled -= instance.OnProduce;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);

    // Interacable
    private readonly InputActionMap m_Interacable;
    private List<IInteracableActions> m_InteracableActionsCallbackInterfaces = new List<IInteracableActions>();
    private readonly InputAction m_Interacable_InteracableAction;
    public struct InteracableActions
    {
        private @MouseInputAction m_Wrapper;
        public InteracableActions(@MouseInputAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @InteracableAction => m_Wrapper.m_Interacable_InteracableAction;
        public InputActionMap Get() { return m_Wrapper.m_Interacable; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(InteracableActions set) { return set.Get(); }
        public void AddCallbacks(IInteracableActions instance)
        {
            if (instance == null || m_Wrapper.m_InteracableActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_InteracableActionsCallbackInterfaces.Add(instance);
            @InteracableAction.started += instance.OnInteracableAction;
            @InteracableAction.performed += instance.OnInteracableAction;
            @InteracableAction.canceled += instance.OnInteracableAction;
        }

        private void UnregisterCallbacks(IInteracableActions instance)
        {
            @InteracableAction.started -= instance.OnInteracableAction;
            @InteracableAction.performed -= instance.OnInteracableAction;
            @InteracableAction.canceled -= instance.OnInteracableAction;
        }

        public void RemoveCallbacks(IInteracableActions instance)
        {
            if (m_Wrapper.m_InteracableActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IInteracableActions instance)
        {
            foreach (var item in m_Wrapper.m_InteracableActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_InteracableActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public InteracableActions @Interacable => new InteracableActions(this);
    private int m_KMSchemeIndex = -1;
    public InputControlScheme KMScheme
    {
        get
        {
            if (m_KMSchemeIndex == -1) m_KMSchemeIndex = asset.FindControlSchemeIndex("KM");
            return asset.controlSchemes[m_KMSchemeIndex];
        }
    }
    public interface IUIActions
    {
        void OnMousePosition(InputAction.CallbackContext context);
        void OnRClick(InputAction.CallbackContext context);
        void OnLClick(InputAction.CallbackContext context);
        void OnInventroyOnOff(InputAction.CallbackContext context);
        void OnProduce(InputAction.CallbackContext context);
    }
    public interface IInteracableActions
    {
        void OnInteracableAction(InputAction.CallbackContext context);
    }
}
